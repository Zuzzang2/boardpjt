# Spring Boot 애플리케이션 설정 파일 (YAML 형식)
# 이 파일은 애플리케이션의 기본 설정을 정의하며, 환경별 설정 파일(application-{profile}.yml)과 함께 사용됨

spring:
  data:
    redis:
      host: ${REDIS_HOST}
      username: ${REDIS_USERNAME}
      password: ${REDIS_PASSWORD}
      port: ${REDIS_PORT}
      ssl:
        enabled: true


  # 데이터베이스 연결 설정 (JPA 사용)
  datasource:
    #   로컬 MySQL 또는 테스트 DB 연결
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      #      # 개발 환경: 스키마 자동 업데이트
      #      # create: 매번 테이블 삭제 후 재생성 (데이터 손실)
      #      # create-drop: 애플리케이션 종료 시 테이블 삭제
      #      # update: 기존 테이블 유지하면서 스키마 변경사항만 적용 (권장)
      #      # validate: 스키마 검증만 수행, 변경하지 않음
      #      # none: 아무것도 하지 않음
      ddl-auto: update
    # JWT 관련 설정은 보안상 환경별 파일에서 정의하는 것이 권장됨
jwt:
  secret: ${JWT_SECRET}
  expiry:
    access: 60000
    refresh: 604800000 # 7일 (밀리초)

      # 또는 클라우드 개발 DB 사용 (Aiven.io 예시)
      # url: jdbc:mysql://mysql-xxx-xxx-xxx.x.aivencloud.com:port/defaultdb?ssl-mode=REQUIRED
      # username: avnadmin
    # password: AVNS_xxx
# === JWT 설정 (예시) ===
# JWT 관련 설정은 보안상 환경별 파일에서 정의하는 것이 권장됨
# jwt:
#   secret: ${JWT_SECRET:defaultSecretKey123456789012345678901234567890}
#   expiry:
#     access: ${JWT_ACCESS_EXPIRY:3600000}   # 1시간 (밀리초)
#     refresh: ${JWT_REFRESH_EXPIRY:604800000} # 7일 (밀리초)

# === 로깅 설정 (예시) ===
# logging:
#   level:
#     com.example.boardpjt: DEBUG          # 애플리케이션 로그 레벨
#     org.springframework.security: DEBUG  # Spring Security 로그
#     org.hibernate.SQL: DEBUG             # Hibernate SQL 로그
#     org.hibernate.type.descriptor.sql.BasicBinder: TRACE # 바인딩 파라미터

# === 서버 설정 (예시) ===
# server:
#   port: ${SERVER_PORT:8080}              # 서버 포트 (환경변수 우선)
#   servlet:
#     context-path: /api                   # 컨텍스트 패스
#   compression:
#     enabled: true                        # HTTP 압축 활성화

---
# === 환경별 설정 파일 가이드 ===

# application-dev.yml (개발 환경)
# 개발자 로컬 환경에서 사용하는 설정
# - 로컬 데이터베이스 연결 정보
# - 상세한 로깅 설정
# - 개발 편의 기능 활성화

#spring:
#  datasource:
#    # 로컬 MySQL 또는 테스트 DB 연결
#    url: jdbc:mysql://localhost:3306/boardpjt_dev?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
#    username: dev_user
#    password: dev_password
#    
#    # 또는 클라우드 개발 DB 사용 (Aiven.io 예시)
#    # url: jdbc:mysql://mysql-xxx-xxx-xxx.x.aivencloud.com:port/defaultdb?ssl-mode=REQUIRED
#    # username: avnadmin  
#    # password: AVNS_xxx
#    
#  jpa:
#    hibernate:
#      # 개발 환경: 스키마 자동 업데이트
#      # create: 매번 테이블 삭제 후 재생성 (데이터 손실)
#      # create-drop: 애플리케이션 종료 시 테이블 삭제
#      # update: 기존 테이블 유지하면서 스키마 변경사항만 적용 (권장)
#      # validate: 스키마 검증만 수행, 변경하지 않음
#      # none: 아무것도 하지 않음
#      ddl-auto: update
#
#jwt:
#  secret: devSecretKey123456789012345678901234567890
#  expiry:
#    access: 3600000    # 1시간
#    refresh: 604800000 # 7일
#
#logging:
#  level:
#    com.example.boardpjt: DEBUG
#    org.springframework.security: DEBUG

---
# application-prod.yml (운영 환경)  
# 실제 서비스 운영 환경에서 사용하는 설정
# - 운영 데이터베이스 연결 정보
# - 보안 강화 설정
# - 성능 최적화 설정

#spring:
#  datasource:
#    url: jdbc:mysql://prod-db-server:3306/boardpjt_prod?useSSL=true&serverTimezone=Asia/Seoul
#    username: ${DB_USERNAME}     # 환경변수로 관리
#    password: ${DB_PASSWORD}     # 환경변수로 관리
#    hikari:                      # 커넥션 풀 설정
#      maximum-pool-size: 20
#      minimum-idle: 5
#      connection-timeout: 30000
#      
#  jpa:
#    hibernate:
#      ddl-auto: validate         # 운영환경에서는 스키마 변경 금지
#    show-sql: false             # 운영환경에서는 SQL 출력 비활성화
#    properties:
#      hibernate:
#        format_sql: false       # 포맷팅도 비활성화
#        
#jwt:
#  secret: ${JWT_SECRET}         # 환경변수로 관리 (보안)
#  expiry:
#    access: 1800000             # 30분 (보안 강화)
#    refresh: 604800000          # 7일
#
#server:
#  port: 8080
#  compression:
#    enabled: true               # 성능 최적화
#    
#logging:
#  level:
#    com.example.boardpjt: INFO  # 운영환경에서는 INFO 레벨
#    org.springframework.security: WARN
#  file:
#    name: /var/log/boardpjt.log # 로그 파일 저장

---
# === 보안 고려사항 ===

# 1. 민감한 정보는 환경변수로 관리:
#    - 데이터베이스 비밀번호
#    - JWT 시크릿 키  
#    - API 키 등

# 2. Profile별 설정 분리:
#    - 개발: 편의성 중심
#    - 운영: 보안과 성능 중심

# 3. 설정 파일 관리:
#    - application.yml: 공통 설정, 버전 관리 포함
#    - application-{profile}.yml: 환경별 설정, 민감정보 제외
#    - 민감한 설정은 환경변수나 외부 설정 서버 활용

# === 성능 최적화 고려사항 ===

# 1. 운영환경 설정:
#    - show-sql: false (성능 향상)
#    - 커넥션 풀 최적화
#    - HTTP 압축 활성화

# 2. 개발환경 설정:
#    - show-sql: true (디버깅 편의)
#    - format_sql: true (가독성)
#    - ddl-auto: update (스키마 자동 관리)